#!/usr/bin/env bash

BIN_NAME=$(basename "$0")
COMMAND_NAME=$1
SUB_COMMAND_NAME=$2

sub_help () {
    echo "Usage: $BIN_NAME <command>"
    echo
    echo "Commands:"
    echo "   help               This help message"
    echo "   edit               Open dotfiles in default editor ($EDITOR_NOWAIT)"
    echo "   reload             Reload dotfiles"
    echo "   test               Run tests"
    echo "   update             Update packages and pkg managers: OS X Applications, Homebrew"
    echo "   osx                Apply OS X system defaults"
    echo "   dock               Apply OS X Dock settings"
}

sub_edit () {
    sh -c "$EDITOR_NOWAIT $DOTFILES_DIR"
}

sub_reload () {
    . ~/.bash_profile && echo "Bash reloaded."
}

sub_test () {
    bats "$DOTFILES_DIR"/test/*.bats
}

sub_update () {
    sudo softwareupdate -i -a
    brew update
    brew upgrade
}

sub_osx () {
    for DEFAULTS_FILE in "$DOTFILES_DIR"/osx/defaults*.sh; do
        echo "Applying $DEFAULTS_FILE" && . "$DEFAULTS_FILE"
    done
    echo "Done. Some changes may require a logout/restart to take effect."
}

sub_dock () {
    . "$DOTFILES_DIR/osx/dock.sh" && echo "Dock reloaded."
}

sub_install () {
    if [ "$SUB_COMMAND_NAME" = "all" ]; then
        ansible-playbook "$DOTFILES_DIR/install/playbook.yml" -i "$DOTFILES_DIR/install/hosts" -e "install_target='${volume// /\\ }'" --ask-sudo-pass
    else
        ansible-playbook "$DOTFILES_DIR/install/playbook.yml" -i "$DOTFILES_DIR/install/hosts" -e "install_target='${volume// /\\ }'" --ask-sudo-pass -t "$SUB_COMMAND_NAME"
    fi
}

# Make sure to keep this in sync with the available public commands

sub_completion () {
    echo "help edit reload test update osx dock install"
}

case $COMMAND_NAME in
    "" | "-h" | "--help")
        sub_help
        ;;
    *)
        shift
        sub_${COMMAND_NAME} $@
        if [ $? = 127 ]; then
            echo "'$COMMAND_NAME' is not a known command or has errors." >&2
            sub_help
            exit 1
        fi
        ;;
esac